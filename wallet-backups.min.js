function parsePrivateKeysFromText(d){var f=d.split(/\W+/g);try{var a=0;for(var c in f){var j=f[c];if(walletIsFull()){throw"Wallet Is Full"}try{var h=detectPrivateKeyFormat(j);var b=privateKeyStringToKey(j,h);if(h=="compsipa"){internalAddKey(b.getBitcoinAddressCompressed().toString(),encodePK(b.priv));++a}else{internalAddKey(b.getBitcoinAddress().toString(),encodePK(b.priv));++a}}catch(g){}}return a}catch(g){makeNotice("error","misc-error",g)}return false}function appendModals(){if($("#import-password-modal").length==0){$("body").append('<div id="import-password-modal" class="modal hide">        <div class="modal-header">        <button type="button" class="close" data-dismiss="modal">×</button>        <h3>Wallet Password</h3>        </div>        <div class="modal-body">            <p>If this wallet is encrypted please enter the password below. Otherwise leave it blank.</p>            <p align="center">                <b>Wallet password:</b> <input style="margin-left:10px" placeholder="password" name="password" type="password"/>            </p>        </div>        <div class="modal-footer">            <div class="btn-group pull-right">               <button class="btn btn-primary">Continue</button>            </div>        </div>    </div>')}if($("#import-second-password-modal").length==0){$("body").append('<div id="import-second-password-modal" class="modal hide">        <div class="modal-header">        <button type="button" class="close" data-dismiss="modal">×</button>        <h3>Wallet Second Password</h3>        </div>        <div class="modal-body">            <p>Please enter the second password for this wallet.</p>            <p align="center">                <b>Second password:</b> <input style="margin-left:10px" placeholder="password" name="password" type="password"/>            </p>        </div>        <div class="modal-footer">            <div class="btn-group pull-right">                <button class="btn btn-primary">Continue</button>            </div>        </div>    </div>')}}function importJSON(d,b,m,i){try{appendModals();var c=0;if(d==null||d.length==0){throw"No import data provided!"}var g=null;try{g=$.parseJSON(d);if(g==null){throw"null input_text"}}catch(h){decrypt(d,b&&b.password?b.password:password,function(n){try{g=$.parseJSON(n);return(g!=null)}catch(o){return false}})}var k=0;var f=function(){try{var n=g.keys[k];var s=n.addr;if(s!=null&&s.length>0&&s!="undefined"){try{var v=n.priv;if(!v){v=n.sec}if(v!=null){if(g.double_encryption){if(b.second_password||dpassword){var u=decrypt(v,g.sharedKey+(dpassword?dpassword:b.second_password),isBase58);if(u==null){throw"Error decrypting private key for address "+s}v=u}else{getPassword($("#import-second-password-modal"),function(e){b.second_password=e;importJSON(d,b,m,i)});return}}var t=privateKeyStringToKey(v,detectPrivateKeyFormat(v));if(t.getBitcoinAddress().toString()==s||t.getBitcoinAddressCompressed().toString()==s){internalAddKey(s,encodePK(t.priv));++c}else{throw"Not importing "+s+" because it is inconsistent with the decoded address "}}var o=addresses[s];if(o){if(n.label&&$.trim(n.label.length)>0){o.label=$.trim(n.label)}if(n.tag){o.tag=n.tag}else{if(n.reserve){o.tag=2}else{o.tag=1}}}}catch(r){console.log(r)}}if(k<g.keys.length-1){++k;setTimeout(f,10);return}if(g.address_book!=null){for(var p=0;p<g.address_book.length;++p){var q=g.address_book[p];if(q.addr&&q.label){internalAddAddressBookEntry(q.addr,q.label)}}}$("#import-input_text").val("");if(c>0){m()}else{throw"No Private Keys Imported. Unknown Format Incorrect Password"}}catch(r){console.log(r);try{i(r)}catch(r){}}};if(g==null){c=parsePrivateKeysFromText(d);$("#import-input_text").val("");if(c>0){m()}else{throw"No Private Keys Imported. Unknown Format or Incorrect Password"}}else{if(g!=null&&g.keys!=null&&g.keys.length>0){if(g.keys.length>1000){makeNotice("info","keys-skipped","Some keys may have been skipped");var l=0;var j=[];var a=function(){try{for(;l<g.keys.length;++l){var n=g.keys[l];var p=n.addr;if(p==null||p.length==0||p=="undefined"){continue}if(n.reserve||n.tag==2){j.push(n.addr)}if(j.length==1000||(l==g.keys.length-1&&j.length>0)){BlockchainAPI.get_balances(j,function(q){try{for(var s in q){if(q[s].final_balance==0){for(var r=0;r<g.keys.length;++r){var u=g.keys[r].addr;if(u==s){if(g.keys.length>1){g.keys.splice(r,1)}--l}}}}setTimeout(a,10)}catch(t){console.log(t);try{i(t)}catch(t){}}},function(q){console.log(q);try{i(q)}catch(q){}});j=[];return}}}catch(o){console.log(o);try{i(o)}catch(o){}}f()};a()}else{f()}}else{throw"Unknown Format"}}}catch(h){console.log(h);try{i(h)}catch(h){}}}function importTextArea(a){getSecondPassword(function(){importJSON(a.val(),{},function(){backupWallet("update",function(){BlockchainAPI.get_history()})},function(b){makeNotice("error","misc-error",b)})})}function importS3WalletBackup(a){setLoadingText("Importing Backup");$.get(root+"wallet/get-backup?guid="+guid+"&sharedKey="+sharedKey+"&id="+a).success(function(d){try{var c=d.payload;getSecondPassword(function(){importJSON(c,{},function(){backupWallet("update",function(){BlockchainAPI.get_history()})},function(f){makeNotice("error","misc-error",f)})})}catch(b){makeNotice("error","misc-error",b)}}).error(function(b){makeNotice("error","misc-error",b.responseText)})}function loadBackupsList(a){setLoadingText("Loading Backup List");$.get(root+"wallet/list-backups?guid="+guid+"&sharedKey="+sharedKey).success(function(h){try{if(h==null){throw"Failed to get backups"}var c=a.find("table tbody").empty();var f=h.results;if(f.length==0){throw"No backups found"}for(var d in f){var b=f[d];c.append("<tr><td>"+b.name+"</td><td>"+dateToString(new Date(b.last_modified))+"</td><td>"+b.size+'</td><td><a href="#" onclick="importS3WalletBackup(\''+b.id+"')\">Import</a></td></tr>")}}catch(g){makeNotice("error","misc-error",g)}}).error(function(b){makeNotice("error","misc-error",b.responseText)})};